{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst btnEl = document.querySelector('[data-start]');\nconst daySpanEl = document.querySelector('[data-days]');\nconst hourSpanEl = document.querySelector('[data-hours]');\nconst minuteSpanEl = document.querySelector('[data-minutes]');\nconst secondSpanEl = document.querySelector('[data-seconds]');\nconst inputEl = document.querySelector('#datetime-picker');\nbtnEl.disabled = true;\n\nlet intervalId = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] > Date.now()) {\n      btnEl.disabled = false;\n      return;\n    }\n    iziToast.info({\n      message: `Please choose a date in the future`,\n    });\n    btnEl.disabled = true;\n  },\n};\n\nflatpickr('#datetime-picker', options);\nbtnEl.addEventListener('click', () => {\n  let resultTime = new Date(inputEl.value).getTime() - Date.now();\n  btnEl.disabled = true;\n  inputEl.disabled = true;\n  intervalId = setInterval(() => {\n    resultTime -= 1000;\n    if (resultTime < 100) {\n      inputEl.disabled = false;\n      clearInterval(intervalId);\n      updateTime();\n      return;\n    }\n    const date = convertMs(resultTime);\n    updateTime(date);\n    console.log(date);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTime({\n  days = '00',\n  hours = '00',\n  minutes = '00',\n  seconds = '00',\n} = {}) {\n  daySpanEl.textContent = addLeadingZero(days);\n  hourSpanEl.textContent = addLeadingZero(hours);\n  minuteSpanEl.textContent = addLeadingZero(minutes);\n  secondSpanEl.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n"],"names":["btnEl","daySpanEl","hourSpanEl","minuteSpanEl","secondSpanEl","inputEl","intervalId","options","selectedDates","iziToast","flatpickr","resultTime","updateTime","date","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"0IAKA,MAAMA,EAAQ,SAAS,cAAc,cAAc,EAC7CC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAU,SAAS,cAAc,kBAAkB,EACzDL,EAAM,SAAW,GAEjB,IAAIM,EAAa,KAEjB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,EAAI,KAAK,IAAG,EAAI,CACjCR,EAAM,SAAW,GACjB,MACD,CACDS,EAAS,KAAK,CACZ,QAAS,oCACf,CAAK,EACDT,EAAM,SAAW,EAClB,CACH,EAEAU,EAAU,mBAAoBH,CAAO,EACrCP,EAAM,iBAAiB,QAAS,IAAM,CACpC,IAAIW,EAAa,IAAI,KAAKN,EAAQ,KAAK,EAAE,QAAS,EAAG,KAAK,MAC1DL,EAAM,SAAW,GACjBK,EAAQ,SAAW,GACnBC,EAAa,YAAY,IAAM,CAE7B,GADAK,GAAc,IACVA,EAAa,IAAK,CACpBN,EAAQ,SAAW,GACnB,cAAcC,CAAU,EACxBM,IACA,MACD,CACD,MAAMC,EAAOC,EAAUH,CAAU,EACjCC,EAAWC,CAAI,EACf,QAAQ,IAAIA,CAAI,CACjB,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAW,CAClB,KAAAI,EAAO,KACP,MAAAC,EAAQ,KACR,QAAAC,EAAU,KACV,QAAAC,EAAU,IACZ,EAAI,GAAI,CACNlB,EAAU,YAAcmB,EAAeJ,CAAI,EAC3Cd,EAAW,YAAckB,EAAeH,CAAK,EAC7Cd,EAAa,YAAciB,EAAeF,CAAO,EACjDd,EAAa,YAAcgB,EAAeD,CAAO,CACnD,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC"}